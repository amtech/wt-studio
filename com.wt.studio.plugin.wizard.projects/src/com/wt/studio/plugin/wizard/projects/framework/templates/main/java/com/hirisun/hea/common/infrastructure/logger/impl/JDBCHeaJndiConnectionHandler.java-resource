/*
 * Copyright 1999,2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.hirisun.hea.common.infrastructure.logger.impl;

import java.sql.Connection;
import java.sql.SQLException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.log4j.jdbcplus.JDBCPoolConnectionHandler;

/**
 * This is a default JDBCConnectionHandler used by JDBCAppender
 * 
 * @author <a href="mailto:t.fenner@klopotek.de">Thomas Fenner</a>
 * @since 1.0
 * @version see jdbcappender.jar/META-INF/MANIFEST.MF for version information
 */
public class JDBCHeaJndiConnectionHandler implements JDBCPoolConnectionHandler {
	/**
	 * 
	 */
	Connection con = null;
	/**
	 * 
	 */
	private String jndiName = null;

	/**
	 * Gets the Connection attribute of the JDBCDefaultConnectionHandler object
	 * 
	 * @return The Connection value
	 */
	public Connection getConnection() throws Exception {
		// test original connection.
		if (this.con == null || this.con.isClosed()) {
			this.con = ((DataSource) lookupDataSource()).getConnection();
		}
		return this.con;
	}

	private DataSource lookupDataSource() {
		try {
			Context context = new InitialContext();
			final String PRIFIXSTR = "java:comp/env/";
			return (DataSource) context.lookup(PRIFIXSTR + jndiName);
		} catch (NamingException e) {
			throw new RuntimeException("Cannot find JNDI DataSource: ");
		}
	}

	protected void closeConnection(Connection con) {
		try {
			con.close();
		} catch (SQLException e) {
			throw new RuntimeException("Failed to close connection");
		}
	}

	/**
	 * interface implementation
	 * 
	 * @param con
	 * @exception Exception
	 */
	public void freeConnection(Connection con) throws Exception {
		closeConnection(con);
	}

	public Connection getConnection(String url, String username, String password)
			throws Exception {
		return getConnection();
	}

	public void setJndiName(String jndiName) {
		this.jndiName = jndiName;
	}
}